"{model}" := Estimate,
"{std}" := "Std. Error",
"{t}" := "t value",
"{pval}" := "Pr(>|t|)",
"{asd}" := pvalue
)
ll <- append(ll, list(a))
i <- i + 1
}
i <- 1
a <- data.frame()
for(x in c(1, 2, 3)){
if (x == 1) {
a <- as.data.frame(ll[1])
}
else {
a <- merge(
a,
as.data.frame(ll[x]),
by.x=paste("row.names", 1, sep="."),
by.y=paste("row.names", x, sep="."),
all=TRUE
)
}
i <- i + 1
}
dat <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:nrow(a)) {
row <- a[i,]
# do stuff with row
label <- row[["row.names.1"]]
fl <- c(
label
)
for(x in c(1, 2, 3)) {
coef <- row[[paste("model", x, sep = ".")]]
pval <- row[[paste("pval", x, sep = ".")]]
vv <- round(coef, digits = 4)
aa <- if(is.na(pval[1])) "" else paste(format(vv, nsmall = 4), pval, sep="")
fl <- append(fl, aa)
}
dat[nrow(dat) + 1,] <- fl
}
print(tbl_df(dat), n=40)
names <- list(m1, m2, m3)
func <- function(x) {
if (x < 0.01) {
return("***");
}
else if (x < 0.05) {
return("**");
}
else if (x < 0.1) {
return("*");
}
return("")
}
ll <- list()
i <- 1
library(glue)
library(tibble)
for(a in names){
model <- paste("model", i, sep = ".")
std <- paste("std_err", i, sep = ".")
t <- paste("t_value", i, sep = ".")
pval <- paste("p_value", i, sep = ".")
nm <- paste("row.names", i, sep = ".")
asd <- paste("pval", i, sep = ".")
a <- tibble::rownames_to_column(a, nm)
a$pvalue <- sapply(a[["Pr(>|t|)"]], FUN = func)
a <- rename(a,
"{model}" := Estimate,
"{std}" := "Std. Error",
"{t}" := "t value",
"{pval}" := "Pr(>|t|)",
"{asd}" := pvalue
)
ll <- append(ll, list(a))
i <- i + 1
}
i <- 1
a <- data.frame()
for(x in c(1, 2, 3)){
if (x == 1) {
a <- as.data.frame(ll[1])
}
else {
a <- merge(
a,
as.data.frame(ll[x]),
by.x=paste("row.names", 1, sep="."),
by.y=paste("row.names", x, sep="."),
all=TRUE
)
}
i <- i + 1
}
dat <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:nrow(a)) {
row <- a[i,]
# do stuff with row
label <- row[["row.names.1"]]
fl <- c(
label
)
for(x in c(1, 2, 3)) {
coef <- row[[paste("model", x, sep = ".")]]
pval <- row[[paste("pval", x, sep = ".")]]
vv <- round(coef, digits = 4)
aa <- if(is.na(pval[1])) "" else paste(format(vv, nsmall = 4), pval, sep="")
fl <- append(fl, aa)
}
dat[nrow(dat) + 1,] <- fl
}
print(tibble::as_tibble(dat), n=40)
names <- list(m1, m2, m3)
func <- function(x) {
if (x < 0.01) {
return("***");
}
else if (x < 0.05) {
return("**");
}
else if (x < 0.1) {
return("*");
}
return("")
}
ll <- list()
i <- 1
library(glue)
library(tibble)
for(a in names){
model <- paste("model", i, sep = ".")
std <- paste("std_err", i, sep = ".")
t <- paste("t_value", i, sep = ".")
pval <- paste("p_value", i, sep = ".")
nm <- paste("row.names", i, sep = ".")
asd <- paste("pval", i, sep = ".")
a <- tibble::rownames_to_column(a, nm)
a$pvalue <- sapply(a[["Pr(>|t|)"]], FUN = func)
a <- rename(a,
"{model}" := Estimate,
"{std}" := "Std. Error",
"{t}" := "t value",
"{pval}" := "Pr(>|t|)",
"{asd}" := pvalue
)
ll <- append(ll, list(a))
i <- i + 1
}
i <- 1
a <- data.frame()
for(x in c(1, 2, 3)){
if (x == 1) {
a <- as.data.frame(ll[1])
}
else {
a <- merge(
a,
as.data.frame(ll[x]),
by.x=paste("row.names", 1, sep="."),
by.y=paste("row.names", x, sep="."),
all=TRUE
)
}
i <- i + 1
}
dat <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:nrow(a)) {
row <- a[i,]
# do stuff with row
label <- row[["row.names.1"]]
fl <- c(
label
)
for(x in c(1, 2, 3)) {
coef <- row[[paste("model", x, sep = ".")]]
pval <- row[[paste("pval", x, sep = ".")]]
vv <- round(coef, digits = 4)
aa <- if(is.na(pval[1])) "" else paste(format(vv, nsmall = 4), pval, sep="")
fl <- append(fl, aa)
}
dat[nrow(dat) + 1,] <- fl
}
print.data.frame(dat)
names <- list(m1, m2, m3)
func <- function(x) {
if (x < 0.01) {
return("***");
}
else if (x < 0.05) {
return("**");
}
else if (x < 0.1) {
return("*");
}
return("")
}
ll <- list()
i <- 1
library(glue)
library(tibble)
for(a in names){
model <- paste("model", i, sep = ".")
std <- paste("std_err", i, sep = ".")
t <- paste("t_value", i, sep = ".")
pval <- paste("p_value", i, sep = ".")
nm <- paste("row.names", i, sep = ".")
asd <- paste("pval", i, sep = ".")
a <- tibble::rownames_to_column(a, nm)
a$pvalue <- sapply(a[["Pr(>|t|)"]], FUN = func)
a <- rename(a,
"{model}" := Estimate,
"{std}" := "Std. Error",
"{t}" := "t value",
"{pval}" := "Pr(>|t|)",
"{asd}" := pvalue
)
ll <- append(ll, list(a))
i <- i + 1
}
i <- 1
a <- data.frame()
for(x in c(1, 2, 3)){
if (x == 1) {
a <- as.data.frame(ll[1])
}
else {
a <- merge(
a,
as.data.frame(ll[x]),
by.x=paste("row.names", 1, sep="."),
by.y=paste("row.names", x, sep="."),
all=TRUE
)
}
i <- i + 1
}
dat <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:nrow(a)) {
row <- a[i,]
# do stuff with row
label <- row[["row.names.1"]]
fl <- c(
label
)
for(x in c(1, 2, 3)) {
coef <- row[[paste("model", x, sep = ".")]]
pval <- row[[paste("pval", x, sep = ".")]]
vv <- round(coef, digits = 4)
aa <- if(is.na(pval[1])) "" else paste(format(vv, nsmall = 4), pval, sep="")
fl <- append(fl, aa)
}
dat[nrow(dat) + 1,] <- fl
}
print(dat, n = 1e3)
names <- list(m1, m2, m3)
func <- function(x) {
if (x < 0.01) {
return("***");
}
else if (x < 0.05) {
return("**");
}
else if (x < 0.1) {
return("*");
}
return("")
}
ll <- list()
i <- 1
library(glue)
library(tibble)
for(a in names){
model <- paste("model", i, sep = ".")
std <- paste("std_err", i, sep = ".")
t <- paste("t_value", i, sep = ".")
pval <- paste("p_value", i, sep = ".")
nm <- paste("row.names", i, sep = ".")
asd <- paste("pval", i, sep = ".")
a <- tibble::rownames_to_column(a, nm)
a$pvalue <- sapply(a[["Pr(>|t|)"]], FUN = func)
a <- rename(a,
"{model}" := Estimate,
"{std}" := "Std. Error",
"{t}" := "t value",
"{pval}" := "Pr(>|t|)",
"{asd}" := pvalue
)
ll <- append(ll, list(a))
i <- i + 1
}
i <- 1
a <- data.frame()
for(x in c(1, 2, 3)){
if (x == 1) {
a <- as.data.frame(ll[1])
}
else {
a <- merge(
a,
as.data.frame(ll[x]),
by.x=paste("row.names", 1, sep="."),
by.y=paste("row.names", x, sep="."),
all=TRUE
)
}
i <- i + 1
}
dat <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:nrow(a)) {
row <- a[i,]
# do stuff with row
label <- row[["row.names.1"]]
fl <- c(
label
)
for(x in c(1, 2, 3)) {
coef <- row[[paste("model", x, sep = ".")]]
pval <- row[[paste("pval", x, sep = ".")]]
vv <- round(coef, digits = 4)
aa <- if(is.na(pval[1])) "" else paste(format(vv, nsmall = 4), pval, sep="")
fl <- append(fl, aa)
}
dat[nrow(dat) + 1,] <- fl
}
tc <- textConnection("str", "w")
sink(tc)   # divert output to tc connection
print(dat)  # print in str string instead of console
sink()     # set the output back to console
close(tc)  # close connection
str <- substr(str,floor(length(str)/10)+3,nchar(str[1])) # we get rid of the row numbers that come with print
str <- paste0("| ",str,"|",collapse="\n")        # we build a proper unique string with your pipes and new lines
cat(str)
names <- list(m1, m2, m3)
func <- function(x) {
if (x < 0.01) {
return("***");
}
else if (x < 0.05) {
return("**");
}
else if (x < 0.1) {
return("*");
}
return("")
}
ll <- list()
i <- 1
library(glue)
library(tibble)
for(a in names){
model <- paste("model", i, sep = ".")
std <- paste("std_err", i, sep = ".")
t <- paste("t_value", i, sep = ".")
pval <- paste("p_value", i, sep = ".")
nm <- paste("row.names", i, sep = ".")
asd <- paste("pval", i, sep = ".")
a <- tibble::rownames_to_column(a, nm)
a$pvalue <- sapply(a[["Pr(>|t|)"]], FUN = func)
a <- rename(a,
"{model}" := Estimate,
"{std}" := "Std. Error",
"{t}" := "t value",
"{pval}" := "Pr(>|t|)",
"{asd}" := pvalue
)
ll <- append(ll, list(a))
i <- i + 1
}
i <- 1
a <- data.frame()
for(x in c(1, 2, 3)){
if (x == 1) {
a <- as.data.frame(ll[1])
}
else {
a <- merge(
a,
as.data.frame(ll[x]),
by.x=paste("row.names", 1, sep="."),
by.y=paste("row.names", x, sep="."),
all=TRUE
)
}
i <- i + 1
}
dat <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:nrow(a)) {
row <- a[i,]
# do stuff with row
label <- row[["row.names.1"]]
fl <- c(
label
)
for(x in c(1, 2, 3)) {
coef <- row[[paste("model", x, sep = ".")]]
pval <- row[[paste("pval", x, sep = ".")]]
vv <- round(coef, digits = 4)
aa <- if(is.na(pval[1])) "" else paste(format(vv, nsmall = 4), pval, sep="")
fl <- append(fl, aa)
}
dat[nrow(dat) + 1,] <- fl
}
dat
names <- list(m1, m2, m3)
func <- function(x) {
if (x < 0.01) {
return("***");
}
else if (x < 0.05) {
return("**");
}
else if (x < 0.1) {
return("*");
}
return("")
}
ll <- list()
i <- 1
library(glue)
library(tibble)
for(a in names){
model <- paste("model", i, sep = ".")
std <- paste("std_err", i, sep = ".")
t <- paste("t_value", i, sep = ".")
pval <- paste("p_value", i, sep = ".")
nm <- paste("row.names", i, sep = ".")
asd <- paste("pval", i, sep = ".")
a <- tibble::rownames_to_column(a, nm)
a$pvalue <- sapply(a[["Pr(>|t|)"]], FUN = func)
a <- rename(a,
"{model}" := Estimate,
"{std}" := "Std. Error",
"{t}" := "t value",
"{pval}" := "Pr(>|t|)",
"{asd}" := pvalue
)
ll <- append(ll, list(a))
i <- i + 1
}
i <- 1
a <- data.frame()
for(x in c(1, 2, 3)){
if (x == 1) {
a <- as.data.frame(ll[1])
}
else {
a <- merge(
a,
as.data.frame(ll[x]),
by.x=paste("row.names", 1, sep="."),
by.y=paste("row.names", x, sep="."),
all=TRUE
)
}
i <- i + 1
}
dat <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:nrow(a)) {
row <- a[i,]
# do stuff with row
label <- row[["row.names.1"]]
fl <- c(
label
)
for(x in c(1, 2, 3)) {
coef <- row[[paste("model", x, sep = ".")]]
pval <- row[[paste("pval", x, sep = ".")]]
vv <- round(coef, digits = 4)
aa <- if(is.na(pval[1])) "" else paste(format(vv, nsmall = 4), pval, sep="")
fl <- append(fl, aa)
}
dat[nrow(dat) + 1,] <- fl
}
print.data.frame(dat)
library(lemon)
install.packages("lemon")
head(dat)
library(lemon)
knit_print.data.frame <- lemon_print
head(dat)
kable(head(dat),caption='Normal `kable` usage.')
install.packages("knitr")
install.packages("knitr")
kable(head(dat),caption='Normal `kable` usage.')
library(lemon)
library(knitr)
library(lemon)
knit_print.data.frame <- lemon_print
kable(head(dat),caption='Normal `kable` usage.')
library(knitr)
library(knitr)
knit_print.table <- lemon_print
summary(dat)
knit_print.table <- lemon_print
kable(dat)
knit_print.table <- lemon_print
kableExtra::kable(dat)
knit_print.table <- lemon_print
dat
dat
install.packages("kableExtra")
library(kableExtra)
install.packages("rlang")
install.packages("rlang")
library(kableExtra)
library(kableExtra)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
